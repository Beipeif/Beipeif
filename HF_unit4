{"metadata":{"accelerator":"GPU","colab":{"private_outputs":true,"provenance":[{"file_id":"https://github.com/huggingface/deep-rl-class/blob/main/notebooks/unit4/unit4.ipynb","timestamp":1705390527478}],"collapsed_sections":["BPLwsPajb1f8","L_WSo0VUV99t","mjY-eq3eWh9O","JoTC9o2SczNn","gfGJNZBUP7Vn","x62pP0PHdA-y"],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Unit 4: Code your first Deep Reinforcement Learning Algorithm with PyTorch: Reinforce. And test its robustness üí™\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/unit6/thumbnail.png\" alt=\"thumbnail\"/>\n\n\nIn this notebook, you'll code your first Deep Reinforcement Learning algorithm from scratch: Reinforce (also called Monte Carlo Policy Gradient).\n\nReinforce is a *Policy-based method*: a Deep Reinforcement Learning algorithm that tries **to optimize the policy directly without using an action-value function**.\n\nMore precisely, Reinforce is a *Policy-gradient method*, a subclass of *Policy-based methods* that aims **to optimize the policy directly by estimating the weights of the optimal policy using gradient ascent**.\n\nTo test its robustness, we're going to train it in 2 different simple environments:\n- Cartpole-v1\n- PixelcopterEnv\n\n‚¨áÔ∏è Here is an example of what **you will achieve at the end of this notebook.** ‚¨áÔ∏è","metadata":{"id":"CjRWziAVU2lZ"}},{"cell_type":"markdown","source":"  <img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/unit6/envs.gif\" alt=\"Environments\"/>\n","metadata":{"id":"s4rBom2sbo7S"}},{"cell_type":"markdown","source":"### üéÆ Environments:\n\n- [CartPole-v1](https://www.gymlibrary.dev/environments/classic_control/cart_pole/)\n- [PixelCopter](https://pygame-learning-environment.readthedocs.io/en/latest/user/games/pixelcopter.html)\n\n### üìö RL-Library:\n\n- Python\n- PyTorch\n\n\nWe're constantly trying to improve our tutorials, so **if you find some issues in this notebook**, please [open an issue on the GitHub Repo](https://github.com/huggingface/deep-rl-class/issues).","metadata":{"id":"BPLwsPajb1f8"}},{"cell_type":"markdown","source":"## Objectives of this notebook üèÜ\nAt the end of the notebook, you will:\n- Be able to **code from scratch a Reinforce algorithm using PyTorch.**\n- Be able to **test the robustness of your agent using simple environments.**\n- Be able to **push your trained agent to the Hub** with a nice video replay and an evaluation score üî•.","metadata":{"id":"L_WSo0VUV99t"}},{"cell_type":"markdown","source":"## This notebook is from the Deep Reinforcement Learning Course\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/notebooks/deep-rl-course-illustration.jpg\" alt=\"Deep RL Course illustration\"/>","metadata":{"id":"lEPrZg2eWa4R"}},{"cell_type":"markdown","source":"In this free course, you will:\n\n- üìñ Study Deep Reinforcement Learning in **theory and practice**.\n- üßë‚Äçüíª Learn to **use famous Deep RL libraries** such as Stable Baselines3, RL Baselines3 Zoo, CleanRL and Sample Factory 2.0.\n- ü§ñ Train **agents in unique environments**\n\nAnd more check üìö the syllabus üëâ https://simoninithomas.github.io/deep-rl-course\n\nDon‚Äôt forget to **<a href=\"http://eepurl.com/ic5ZUD\">sign up to the course</a>** (we are collecting your email to be able to¬†**send you the links when each Unit is published and give you information about the challenges and updates).**\n\n\nThe best way to keep in touch is to join our discord server to exchange with the community and with us üëâüèª https://discord.gg/ydHrjt3WP5","metadata":{"id":"6p5HnEefISCB"}},{"cell_type":"markdown","source":"## Prerequisites üèóÔ∏è\nBefore diving into the notebook, you need to:\n\nüî≤ üìö [Study Policy Gradients by reading Unit 4](https://huggingface.co/deep-rl-course/unit4/introduction)","metadata":{"id":"mjY-eq3eWh9O"}},{"cell_type":"markdown","source":"# Let's code Reinforce algorithm from scratch üî•\n\n\nTo validate this hands-on for the certification process, you need to push your trained models to the Hub.\n\n- Get a result of >= 350 for `Cartpole-v1`.\n- Get a result of >= 5 for `PixelCopter`.\n\nTo find your result, go to the leaderboard and find your model, **the result = mean_reward - std of reward**. **If you don't see your model on the leaderboard, go at the bottom of the leaderboard page and click on the refresh button**.\n\nFor more information about the certification process, check this section üëâ https://huggingface.co/deep-rl-course/en/unit0/introduction#certification-process\n","metadata":{"id":"Bsh4ZAamchSl"}},{"cell_type":"markdown","source":"## An advice üí°\nIt's better to run this colab in a copy on your Google Drive, so that **if it timeouts** you still have the saved notebook on your Google Drive and do not need to fill everything from scratch.\n\nTo do that you can either do `Ctrl + S` or `File > Save a copy in Google Drive.`","metadata":{"id":"JoTC9o2SczNn"}},{"cell_type":"markdown","source":"## Set the GPU üí™\n- To **accelerate the agent's training, we'll use a GPU**. To do that, go to `Runtime > Change Runtime type`\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/notebooks/gpu-step1.jpg\" alt=\"GPU Step 1\">","metadata":{"id":"PU4FVzaoM6fC"}},{"cell_type":"markdown","source":"- `Hardware Accelerator > GPU`\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/notebooks/gpu-step2.jpg\" alt=\"GPU Step 2\">","metadata":{"id":"KV0NyFdQM9ZG"}},{"cell_type":"markdown","source":"## Create a virtual display üñ•\n\nDuring the notebook, we'll need to generate a replay video. To do so, with colab, **we need to have a virtual screen to be able to render the environment** (and thus record the frames).\n\nHence the following cell will install the librairies and create and run a virtual screen üñ•","metadata":{"id":"bTpYcVZVMzUI"}},{"cell_type":"code","source":"%%capture\n!apt install python-opengl\n!apt install ffmpeg\n!apt install xvfb\n!pip install pyvirtualdisplay\n!pip install pyglet==1.5.1","metadata":{"id":"jV6wjQ7Be7p5","execution":{"iopub.status.busy":"2024-01-17T03:56:11.764913Z","iopub.execute_input":"2024-01-17T03:56:11.765924Z","iopub.status.idle":"2024-01-17T03:56:45.768016Z","shell.execute_reply.started":"2024-01-17T03:56:11.765885Z","shell.execute_reply":"2024-01-17T03:56:45.766700Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"!python","metadata":{"execution":{"iopub.status.busy":"2024-01-17T03:57:11.713626Z","iopub.execute_input":"2024-01-17T03:57:11.714605Z","iopub.status.idle":"2024-01-17T03:57:24.345471Z","shell.execute_reply.started":"2024-01-17T03:57:11.714558Z","shell.execute_reply":"2024-01-17T03:57:24.344239Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Python 3.10.12 | packaged by conda-forge | (main, Jun 23 2023, 22:40:32) [GCC 12.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyboardInterrupt\n>>> ","output_type":"stream"}]},{"cell_type":"code","source":"# Virtual display\nfrom pyvirtualdisplay import Display\n\nvirtual_display = Display(visible=0, size=(1400, 900))\nvirtual_display.start()","metadata":{"id":"Sr-Nuyb1dBm0","execution":{"iopub.status.busy":"2024-01-17T04:00:29.452572Z","iopub.execute_input":"2024-01-17T04:00:29.453014Z","iopub.status.idle":"2024-01-17T04:00:29.561016Z","shell.execute_reply.started":"2024-01-17T04:00:29.452982Z","shell.execute_reply":"2024-01-17T04:00:29.559976Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"<pyvirtualdisplay.display.Display at 0x7d26953d87f0>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Install the dependencies üîΩ\nThe first step is to install the dependencies. We‚Äôll install multiple ones:\n\n- `gym`\n- `gym-games`: Extra gym environments made with PyGame.\n- `huggingface_hub`: ü§ó works as a central place where anyone can share and explore models and datasets. It has versioning, metrics, visualizations, and other features that will allow you to easily collaborate with others.\n\nYou may be wondering why we install gym and not gymnasium, a more recent version of gym? **Because the gym-games we are using are not updated yet with gymnasium**.\n\nThe differences you'll encounter here:\n- In `gym` we don't have `terminated` and `truncated` but only `done`.\n- In `gym` using `env.step()` returns `state, reward, done, info`\n\nYou can learn more about the differences between Gym and Gymnasium here üëâ https://gymnasium.farama.org/content/migration-guide/\n\n\nYou can see here all the Reinforce models available üëâ https://huggingface.co/models?other=reinforce\n\nAnd you can find all the Deep Reinforcement Learning models here üëâ https://huggingface.co/models?pipeline_tag=reinforcement-learning\n","metadata":{"id":"tjrLfPFIW8XK"}},{"cell_type":"code","source":"!pip install -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt","metadata":{"id":"e8ZVi-uydpgL","execution":{"iopub.status.busy":"2024-01-17T07:20:42.951458Z","iopub.execute_input":"2024-01-17T07:20:42.951861Z","iopub.status.idle":"2024-01-17T07:20:59.644959Z","shell.execute_reply.started":"2024-01-17T07:20:42.951834Z","shell.execute_reply":"2024-01-17T07:20:59.643898Z"},"trusted":true},"execution_count":88,"outputs":[{"name":"stdout","text":"Collecting git+https://github.com/ntasfi/PyGame-Learning-Environment.git (from -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 1))\n  Cloning https://github.com/ntasfi/PyGame-Learning-Environment.git to /tmp/pip-req-build-hke8ieif\n  Running command git clone --filter=blob:none --quiet https://github.com/ntasfi/PyGame-Learning-Environment.git /tmp/pip-req-build-hke8ieif\n  Resolved https://github.com/ntasfi/PyGame-Learning-Environment.git to commit 3dbe79dc0c35559bb441b9359948aabf9bb3d331\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hCollecting git+https://github.com/simoninithomas/gym-games (from -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 2))\n  Cloning https://github.com/simoninithomas/gym-games to /tmp/pip-req-build-gl1o8ei6\n  Running command git clone --filter=blob:none --quiet https://github.com/simoninithomas/gym-games /tmp/pip-req-build-gl1o8ei6\n  Resolved https://github.com/simoninithomas/gym-games to commit f31695e4ba028400628dc054ee8a436f28193f0b\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hRequirement already satisfied: huggingface_hub in /opt/conda/lib/python3.10/site-packages (from -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (0.20.2)\nRequirement already satisfied: imageio-ffmpeg in /opt/conda/lib/python3.10/site-packages (from -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 4)) (0.4.9)\nCollecting pyyaml==6.0 (from -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 5))\n  Using cached PyYAML-6.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (682 kB)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from ple==0.0.1->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 1)) (1.24.3)\nRequirement already satisfied: Pillow in /opt/conda/lib/python3.10/site-packages (from ple==0.0.1->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 1)) (9.5.0)\nRequirement already satisfied: gym>=0.13.0 in /opt/conda/lib/python3.10/site-packages (from gym-games==1.0.4->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 2)) (0.26.2)\nRequirement already satisfied: setuptools>=65.5.1 in /opt/conda/lib/python3.10/site-packages (from gym-games==1.0.4->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 2)) (68.1.2)\nRequirement already satisfied: pygame>=1.9.6 in /opt/conda/lib/python3.10/site-packages (from gym-games==1.0.4->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 2)) (2.5.2)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (3.12.2)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (2023.12.2)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (2.31.0)\nRequirement already satisfied: tqdm>=4.42.1 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (4.66.1)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (4.5.0)\nRequirement already satisfied: packaging>=20.9 in /opt/conda/lib/python3.10/site-packages (from huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (21.3)\nRequirement already satisfied: cloudpickle>=1.2.0 in /opt/conda/lib/python3.10/site-packages (from gym>=0.13.0->gym-games==1.0.4->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 2)) (2.2.1)\nRequirement already satisfied: gym-notices>=0.0.4 in /opt/conda/lib/python3.10/site-packages (from gym>=0.13.0->gym-games==1.0.4->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 2)) (0.0.8)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.9->huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (3.0.9)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (3.2.0)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (3.4)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (1.26.15)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->huggingface_hub->-r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit4/requirements-unit4.txt (line 3)) (2023.11.17)\n\u001b[33mWARNING: Error parsing requirements for pyyaml: [Errno 2] No such file or directory: '/opt/conda/lib/python3.10/site-packages/PyYAML-6.0.1.dist-info/METADATA'\u001b[0m\u001b[33m\n\u001b[0mInstalling collected packages: pyyaml\n  Attempting uninstall: pyyaml\n\u001b[33m    WARNING: No metadata found in /opt/conda/lib/python3.10/site-packages\u001b[0m\u001b[33m\n\u001b[0m    Found existing installation: pyyaml 6.0.1\n\u001b[31mERROR: Cannot uninstall pyyaml 6.0.1, RECORD file not found. You might be able to recover from this via: 'pip install --force-reinstall --no-deps pyyaml==6.0.1'.\u001b[0m\u001b[31m\n\u001b[0m","output_type":"stream"}]},{"cell_type":"markdown","source":"## Import the packages üì¶\nIn addition to import the installed libraries, we also import:\n\n- `imageio`: A library that will help us to generate a replay video\n\n","metadata":{"id":"AAHAq6RZW3rn"}},{"cell_type":"code","source":"import numpy as np\n\nfrom collections import deque\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# PyTorch\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.distributions import Categorical\n\n# Gym\nimport gym\nimport gym_pygame\n\n# Hugging Face Hub\nfrom huggingface_hub import notebook_login # To log to our Hugging Face account to be able to upload models to the Hub.\nimport imageio","metadata":{"id":"V8oadoJSWp7C","execution":{"iopub.status.busy":"2024-01-17T07:18:51.560554Z","iopub.execute_input":"2024-01-17T07:18:51.560969Z","iopub.status.idle":"2024-01-17T07:18:51.569529Z","shell.execute_reply.started":"2024-01-17T07:18:51.560936Z","shell.execute_reply":"2024-01-17T07:18:51.568444Z"},"trusted":true},"execution_count":78,"outputs":[]},{"cell_type":"code","source":"import huggingface_hub","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:19:14.110737Z","iopub.execute_input":"2024-01-17T07:19:14.111135Z","iopub.status.idle":"2024-01-17T07:19:14.116104Z","shell.execute_reply.started":"2024-01-17T07:19:14.111107Z","shell.execute_reply":"2024-01-17T07:19:14.114928Z"},"trusted":true},"execution_count":79,"outputs":[]},{"cell_type":"markdown","source":"## Check if we have a GPU\n\n- Let's check if we have a GPU\n- If it's the case you should see `device:cuda0`","metadata":{"id":"RfxJYdMeeVgv"}},{"cell_type":"code","source":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","metadata":{"id":"kaJu5FeZxXGY","execution":{"iopub.status.busy":"2024-01-17T04:00:35.870232Z","iopub.execute_input":"2024-01-17T04:00:35.870609Z","iopub.status.idle":"2024-01-17T04:00:35.875606Z","shell.execute_reply.started":"2024-01-17T04:00:35.870582Z","shell.execute_reply":"2024-01-17T04:00:35.874576Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"print(device)","metadata":{"id":"U5TNYa14aRav","execution":{"iopub.status.busy":"2024-01-17T04:00:37.751267Z","iopub.execute_input":"2024-01-17T04:00:37.752401Z","iopub.status.idle":"2024-01-17T04:00:37.757474Z","shell.execute_reply.started":"2024-01-17T04:00:37.752364Z","shell.execute_reply":"2024-01-17T04:00:37.756223Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stdout","text":"cuda:0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"We're now ready to implement our Reinforce algorithm üî•","metadata":{"id":"PBPecCtBL_pZ"}},{"cell_type":"markdown","source":"# First agent: Playing CartPole-v1 ü§ñ","metadata":{"id":"8KEyKYo2ZSC-"}},{"cell_type":"markdown","source":"## Create the CartPole environment and understand how it works\n### [The environment üéÆ](https://www.gymlibrary.dev/environments/classic_control/cart_pole/)\n","metadata":{"id":"haLArKURMyuF"}},{"cell_type":"markdown","source":"### Why do we use a simple environment like CartPole-v1?\nAs explained in [Reinforcement Learning Tips and Tricks](https://stable-baselines3.readthedocs.io/en/master/guide/rl_tips.html), when you implement your agent from scratch you need **to be sure that it works correctly and find bugs with easy environments before going deeper**. Since finding bugs will be much easier in simple environments.\n\n\n> Try to have some ‚Äúsign of life‚Äù on toy problems\n\n\n> Validate the implementation by making it run on harder and harder envs (you can compare results against the RL zoo). You usually need to run hyperparameter optimization for that step.\n___\n### The CartPole-v1 environment\n\n> A pole is attached by an un-actuated joint to a cart, which moves along a frictionless track. The pendulum is placed upright on the cart and the goal is to balance the pole by applying forces in the left and right direction on the cart.\n\n\n\nSo, we start with CartPole-v1. The goal is to push the cart left or right **so that the pole stays in the equilibrium.**\n\nThe episode ends if:\n- The pole Angle is greater than ¬±12¬∞\n- Cart Position is greater than ¬±2.4\n- Episode length is greater than 500\n\nWe get a reward üí∞ of +1 every timestep the Pole stays in the equilibrium.","metadata":{"id":"AH_TaLKFXo_8"}},{"cell_type":"code","source":"env_id = \"CartPole-v1\"\n# Create the env\nenv = gym.make(env_id)\n\n# Create the evaluation env\neval_env = gym.make(env_id)\n\n# Get the state space and action space\ns_size = env.observation_space.shape[0]\na_size = env.action_space.n","metadata":{"id":"POOOk15_K6KA","execution":{"iopub.status.busy":"2024-01-17T04:00:47.844431Z","iopub.execute_input":"2024-01-17T04:00:47.844822Z","iopub.status.idle":"2024-01-17T04:00:47.864489Z","shell.execute_reply.started":"2024-01-17T04:00:47.844792Z","shell.execute_reply":"2024-01-17T04:00:47.863587Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"print(\"_____OBSERVATION SPACE_____ \\n\")\nprint(\"The State Space is: \", s_size)\nprint(\"Sample observation\", env.observation_space.sample()) # Get a random observation","metadata":{"id":"FMLFrjiBNLYJ","execution":{"iopub.status.busy":"2024-01-17T04:00:50.039297Z","iopub.execute_input":"2024-01-17T04:00:50.039703Z","iopub.status.idle":"2024-01-17T04:00:50.047959Z","shell.execute_reply.started":"2024-01-17T04:00:50.039674Z","shell.execute_reply":"2024-01-17T04:00:50.046500Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"_____OBSERVATION SPACE_____ \n\nThe State Space is:  4\nSample observation [ 4.5715967e-01  2.9207130e+38 -3.6616170e-01 -2.5538172e+38]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"\\n _____ACTION SPACE_____ \\n\")\nprint(\"The Action Space is: \", a_size)\nprint(\"Action Space Sample\", env.action_space.sample()) # Take a random action","metadata":{"id":"Lu6t4sRNNWkN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Let's build the Reinforce Architecture\nThis implementation is based on two implementations:\n- [PyTorch official Reinforcement Learning example](https://github.com/pytorch/examples/blob/main/reinforcement_learning/reinforce.py)\n- [Udacity Reinforce](https://github.com/udacity/deep-reinforcement-learning/blob/master/reinforce/REINFORCE.ipynb)\n- [Improvement of the integration by Chris1nexus](https://github.com/huggingface/deep-rl-class/pull/95)\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/unit6/reinforce.png\" alt=\"Reinforce\"/>","metadata":{"id":"7SJMJj3WaFOz"}},{"cell_type":"markdown","source":"So we want:\n- Two fully connected layers (fc1 and fc2).\n- Using ReLU as activation function of fc1\n- Using Softmax to output a probability distribution over actions","metadata":{"id":"49kogtxBODX8"}},{"cell_type":"code","source":"class Policy(nn.Module):\n    def __init__(self, s_size, a_size, h_size):\n        super(Policy, self).__init__()\n        # Create two fully connected layers\n\n\n\n    def forward(self, x):\n        # Define the forward pass\n        # state goes to fc1 then we apply ReLU activation function\n\n        # fc1 outputs goes to fc2\n\n        # We output the softmax\n\n    def act(self, state):\n        \"\"\"\n        Given a state, take action\n        \"\"\"\n        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n        probs = self.forward(state).cpu()\n        m = Categorical(probs)\n        action = np.argmax(m)\n        return action.item(), m.log_prob(action)","metadata":{"id":"w2LHcHhVZvPZ","execution":{"iopub.status.busy":"2024-01-17T04:00:54.169045Z","iopub.execute_input":"2024-01-17T04:00:54.169445Z","iopub.status.idle":"2024-01-17T04:00:54.178671Z","shell.execute_reply.started":"2024-01-17T04:00:54.169415Z","shell.execute_reply":"2024-01-17T04:00:54.177115Z"},"trusted":true},"execution_count":32,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[32], line 16\u001b[0;36m\u001b[0m\n\u001b[0;31m    def act(self, state):\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after function definition on line 8\n"],"ename":"IndentationError","evalue":"expected an indented block after function definition on line 8 (3294708274.py, line 16)","output_type":"error"}]},{"cell_type":"markdown","source":"### Solution","metadata":{"id":"rOMrdwSYOWSC"}},{"cell_type":"code","source":"class Policy(nn.Module):\n    def __init__(self, s_size, a_size, h_size):\n        super(Policy, self).__init__()\n        self.fc1 = nn.Linear(s_size, h_size)\n        self.fc2 = nn.Linear(h_size, a_size)\n\n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return F.softmax(x, dim=1)\n\n    def act(self, state):\n        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n        probs = self.forward(state).cpu()\n        m = Categorical(probs)\n        action = np.argmax(m)\n        return action.item(), m.log_prob(action)","metadata":{"id":"jGdhRSVrOV4K","execution":{"iopub.status.busy":"2024-01-17T04:00:57.506547Z","iopub.execute_input":"2024-01-17T04:00:57.506947Z","iopub.status.idle":"2024-01-17T04:00:57.515147Z","shell.execute_reply.started":"2024-01-17T04:00:57.506915Z","shell.execute_reply":"2024-01-17T04:00:57.514109Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"markdown","source":"I make a mistake, can you guess where?\n\n- To find out let's make a forward pass:","metadata":{"id":"ZTGWL4g2eM5B"}},{"cell_type":"code","source":"debug_policy = Policy(s_size, a_size, 64).to(device)\ndebug_policy.act(env.reset())","metadata":{"id":"lwnqGBCNePor"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- Here we see that the error says `ValueError: The value argument to log_prob must be a Tensor`\n\n- It means that `action` in `m.log_prob(action)` must be a Tensor **but it's not.**\n\n- Do you know why? Check the act function and try to see why it does not work.\n\nAdvice üí°: Something is wrong in this implementation. Remember that we act function **we want to sample an action from the probability distribution over actions**.\n","metadata":{"id":"14UYkoxCPaor"}},{"cell_type":"markdown","source":"### (Real) Solution","metadata":{"id":"gfGJNZBUP7Vn"}},{"cell_type":"code","source":"class Policy(nn.Module):\n    def __init__(self, s_size, a_size, h_size):\n        super(Policy, self).__init__()\n        self.fc1 = nn.Linear(s_size, h_size)\n        self.fc2 = nn.Linear(h_size, a_size)\n\n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return F.softmax(x, dim=1)\n\n    def act(self, state):\n        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n        probs = self.forward(state).cpu()\n        m = Categorical(probs)\n        action = m.sample()\n        return action.item(), m.log_prob(action)","metadata":{"id":"Ho_UHf49N9i4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"By using CartPole, it was easier to debug since **we know that the bug comes from our integration and not from our simple environment**.","metadata":{"id":"rgJWQFU_eUYw"}},{"cell_type":"markdown","source":"- Since **we want to sample an action from the probability distribution over actions**, we can't use `action = np.argmax(m)` since it will always output the action that have the highest probability.\n\n- We need to replace with `action = m.sample()` that will sample an action from the probability distribution P(.|s)","metadata":{"id":"c-20i7Pk0l1T"}},{"cell_type":"markdown","source":"### Let's build the Reinforce Training Algorithm\nThis is the Reinforce algorithm pseudocode:\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/unit6/pg_pseudocode.png\" alt=\"Policy gradient pseudocode\"/>\n  ","metadata":{"id":"4MXoqetzfIoW"}},{"cell_type":"markdown","source":"- When we calculate the return Gt (line 6) we see that we calculate the sum of discounted rewards **starting at timestep t**.\n\n- Why? Because our policy should only **reinforce actions on the basis of the consequences**: so rewards obtained before taking an action are useless (since they were not because of the action), **only the ones that come after the action matters**.\n\n- Before coding this you should read this section [don't let the past distract you](https://spinningup.openai.com/en/latest/spinningup/rl_intro3.html#don-t-let-the-past-distract-you) that explains why we use reward-to-go policy gradient.\n\nWe use an interesting technique coded by [Chris1nexus](https://github.com/Chris1nexus) to **compute the return at each timestep efficiently**. The comments explained the procedure. Don't hesitate also [to check the PR explanation](https://github.com/huggingface/deep-rl-class/pull/95)\nBut overall the idea is to **compute the return at each timestep efficiently**.","metadata":{"id":"QmcXG-9i2Qu2"}},{"cell_type":"markdown","source":"The second question you may ask is **why do we minimize the loss**? You talked about Gradient Ascent not Gradient Descent?\n\n- We want to maximize our utility function $J(\\theta)$ but in PyTorch like in Tensorflow it's better to **minimize an objective function.**\n    - So let's say we want to reinforce action 3 at a certain timestep. Before training this action P is 0.25.\n    - So we want to modify $\\theta$ such that $\\pi_\\theta(a_3|s; \\theta) > 0.25$\n    - Because all P must sum to 1, max $\\pi_\\theta(a_3|s; \\theta)$ will **minimize other action probability.**\n    - So we should tell PyTorch **to min $1 - \\pi_\\theta(a_3|s; \\theta)$.**\n    - This loss function approaches 0 as $\\pi_\\theta(a_3|s; \\theta)$ nears 1.\n    - So we are encouraging the gradient to max $\\pi_\\theta(a_3|s; \\theta)$\n","metadata":{"id":"O554nUGPpcoq"}},{"cell_type":"code","source":"def reinforce(policy, optimizer, n_training_episodes, max_t, gamma, print_every):\n    # Help us to calculate the score during the training\n    scores_deque = deque(maxlen=100)\n    scores = []\n    # Line 3 of pseudocode\n    for i_episode in range(1, n_training_episodes+1):\n        saved_log_probs = []\n        rewards = []\n        state = # TODO: reset the environment\n        # Line 4 of pseudocode\n        for t in range(max_t):\n            action, log_prob = # TODO get the action\n            saved_log_probs.append(log_prob)\n            state, reward, done, _ = # TODO: take an env step\n            rewards.append(reward)\n            if done:\n                break\n        scores_deque.append(sum(rewards))\n        scores.append(sum(rewards))\n\n        # Line 6 of pseudocode: calculate the return\n        returns = deque(maxlen=max_t)\n        n_steps = len(rewards)\n        # Compute the discounted returns at each timestep,\n        # as the sum of the gamma-discounted return at time t (G_t) + the reward at time t\n\n        # In O(N) time, where N is the number of time steps\n        # (this definition of the discounted return G_t follows the definition of this quantity\n        # shown at page 44 of Sutton&Barto 2017 2nd draft)\n        # G_t = r_(t+1) + r_(t+2) + ...\n\n        # Given this formulation, the returns at each timestep t can be computed\n        # by re-using the computed future returns G_(t+1) to compute the current return G_t\n        # G_t = r_(t+1) + gamma*G_(t+1)\n        # G_(t-1) = r_t + gamma* G_t\n        # (this follows a dynamic programming approach, with which we memorize solutions in order\n        # to avoid computing them multiple times)\n\n        # This is correct since the above is equivalent to (see also page 46 of Sutton&Barto 2017 2nd draft)\n        # G_(t-1) = r_t + gamma*r_(t+1) + gamma*gamma*r_(t+2) + ...\n\n\n        ## Given the above, we calculate the returns at timestep t as:\n        #               gamma[t] * return[t] + reward[t]\n        #\n        ## We compute this starting from the last timestep to the first, in order\n        ## to employ the formula presented above and avoid redundant computations that would be needed\n        ## if we were to do it from first to last.\n\n        ## Hence, the queue \"returns\" will hold the returns in chronological order, from t=0 to t=n_steps\n        ## thanks to the appendleft() function which allows to append to the position 0 in constant time O(1)\n        ## a normal python list would instead require O(N) to do this.\n        for t in range(n_steps)[::-1]:\n            disc_return_t = (returns[0] if len(returns)>0 else 0)\n            returns.appendleft(    ) # TODO: complete here\n\n        ## standardization of the returns is employed to make training more stable\n        eps = np.finfo(np.float32).eps.item()\n\n        ## eps is the smallest representable float, which is\n        # added to the standard deviation of the returns to avoid numerical instabilities\n        returns = torch.tensor(returns)\n        returns = (returns - returns.mean()) / (returns.std() + eps)\n\n        # Line 7:\n        policy_loss = []\n        for log_prob, disc_return in zip(saved_log_probs, returns):\n            policy_loss.append(-log_prob * disc_return)\n        policy_loss = torch.cat(policy_loss).sum()\n\n        # Line 8: PyTorch prefers gradient descent\n        optimizer.zero_grad()\n        policy_loss.backward()\n        optimizer.step()\n\n        if i_episode % print_every == 0:\n            print('Episode {}\\tAverage Score: {:.2f}'.format(i_episode, np.mean(scores_deque)))\n\n    return scores","metadata":{"id":"iOdv8Q9NfLK7","execution":{"iopub.status.busy":"2024-01-17T03:45:17.014662Z","iopub.execute_input":"2024-01-17T03:45:17.015030Z","iopub.status.idle":"2024-01-17T03:45:17.029496Z","shell.execute_reply.started":"2024-01-17T03:45:17.015000Z","shell.execute_reply":"2024-01-17T03:45:17.028095Z"},"trusted":true},"execution_count":7,"outputs":[{"traceback":["\u001b[0;36m  Cell \u001b[0;32mIn[7], line 9\u001b[0;36m\u001b[0m\n\u001b[0;31m    state = # TODO: reset the environment\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"],"ename":"SyntaxError","evalue":"invalid syntax (2791985728.py, line 9)","output_type":"error"}]},{"cell_type":"markdown","source":"#### Solution","metadata":{"id":"YB0Cxrw1StrP"}},{"cell_type":"code","source":"def reinforce(policy, optimizer, n_training_episodes, max_t, gamma, print_every):\n    # Help us to calculate the score during the training\n    scores_deque = deque(maxlen=100)\n    scores = []\n    # Line 3 of pseudocode\n    for i_episode in range(1, n_training_episodes+1):\n        saved_log_probs = []\n        rewards = []\n        state = env.reset()\n        # Line 4 of pseudocode\n        for t in range(max_t):\n            action, log_prob = policy.act(state)\n            saved_log_probs.append(log_prob)\n            state, reward, done, _ = env.step(action)\n            rewards.append(reward)\n            if done:\n                break\n        scores_deque.append(sum(rewards))\n        scores.append(sum(rewards))\n\n        # Line 6 of pseudocode: calculate the return\n        returns = deque(maxlen=max_t)\n        n_steps = len(rewards)\n        # Compute the discounted returns at each timestep,\n        # as\n        #      the sum of the gamma-discounted return at time t (G_t) + the reward at time t\n        #\n        # In O(N) time, where N is the number of time steps\n        # (this definition of the discounted return G_t follows the definition of this quantity\n        # shown at page 44 of Sutton&Barto 2017 2nd draft)\n        # G_t = r_(t+1) + r_(t+2) + ...\n\n        # Given this formulation, the returns at each timestep t can be computed\n        # by re-using the computed future returns G_(t+1) to compute the current return G_t\n        # G_t = r_(t+1) + gamma*G_(t+1)\n        # G_(t-1) = r_t + gamma* G_t\n        # (this follows a dynamic programming approach, with which we memorize solutions in order\n        # to avoid computing them multiple times)\n\n        # This is correct since the above is equivalent to (see also page 46 of Sutton&Barto 2017 2nd draft)\n        # G_(t-1) = r_t + gamma*r_(t+1) + gamma*gamma*r_(t+2) + ...\n\n\n        ## Given the above, we calculate the returns at timestep t as:\n        #               gamma[t] * return[t] + reward[t]\n        #\n        ## We compute this starting from the last timestep to the first, in order\n        ## to employ the formula presented above and avoid redundant computations that would be needed\n        ## if we were to do it from first to last.\n\n        ## Hence, the queue \"returns\" will hold the returns in chronological order, from t=0 to t=n_steps\n        ## thanks to the appendleft() function which allows to append to the position 0 in constant time O(1)\n        ## a normal python list would instead require O(N) to do this.\n        for t in range(n_steps)[::-1]:\n            disc_return_t = (returns[0] if len(returns)>0 else 0)\n            returns.appendleft( gamma*disc_return_t + rewards[t]   )\n\n        ## standardization of the returns is employed to make training more stable\n        eps = np.finfo(np.float32).eps.item()\n        ## eps is the smallest representable float, which is\n        # added to the standard deviation of the returns to avoid numerical instabilities\n        returns = torch.tensor(returns)\n        returns = (returns - returns.mean()) / (returns.std() + eps)\n\n        # Line 7:\n        policy_loss = []\n        for log_prob, disc_return in zip(saved_log_probs, returns):\n            policy_loss.append(-log_prob * disc_return)\n        policy_loss = torch.cat(policy_loss).sum()\n\n        # Line 8: PyTorch prefers gradient descent\n        optimizer.zero_grad()\n        policy_loss.backward()\n        optimizer.step()\n\n        if i_episode % print_every == 0:\n            print('Episode {}\\tAverage Score: {:.2f}'.format(i_episode, np.mean(scores_deque)))\n\n    return scores","metadata":{"id":"NCNvyElRStWG","execution":{"iopub.status.busy":"2024-01-17T04:01:07.034868Z","iopub.execute_input":"2024-01-17T04:01:07.035251Z","iopub.status.idle":"2024-01-17T04:01:07.048812Z","shell.execute_reply.started":"2024-01-17T04:01:07.035222Z","shell.execute_reply":"2024-01-17T04:01:07.047770Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"markdown","source":"##  Train it\n- We're now ready to train our agent.\n- But first, we define a variable containing all the training hyperparameters.\n- You can change the training parameters (and should üòâ)","metadata":{"id":"RIWhQyJjfpEt"}},{"cell_type":"code","source":"cartpole_hyperparameters = {\n    \"h_size\": 16,\n    \"n_training_episodes\": 1000,\n    \"n_evaluation_episodes\": 10,\n    \"max_t\": 1000,\n    \"gamma\": 1.0,\n    \"lr\": 1e-2,\n    \"env_id\": env_id,\n    \"state_space\": s_size,\n    \"action_space\": a_size,\n}","metadata":{"id":"utRe1NgtVBYF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Create policy and place it to the device\ncartpole_policy = Policy(cartpole_hyperparameters[\"state_space\"], cartpole_hyperparameters[\"action_space\"], cartpole_hyperparameters[\"h_size\"]).to(device)\ncartpole_optimizer = optim.Adam(cartpole_policy.parameters(), lr=cartpole_hyperparameters[\"lr\"])","metadata":{"id":"D3lWyVXBVfl6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"scores = reinforce(cartpole_policy,\n                   cartpole_optimizer,\n                   cartpole_hyperparameters[\"n_training_episodes\"],\n                   cartpole_hyperparameters[\"max_t\"],\n                   cartpole_hyperparameters[\"gamma\"],\n                   100)","metadata":{"id":"uGf-hQCnfouB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Define evaluation method üìù\n- Here we define the evaluation method that we're going to use to test our Reinforce agent.","metadata":{"id":"Qajj2kXqhB3g"}},{"cell_type":"code","source":"def evaluate_agent(env, max_steps, n_eval_episodes, policy):\n  \"\"\"\n  Evaluate the agent for ``n_eval_episodes`` episodes and returns average reward and std of reward.\n  :param env: The evaluation environment\n  :param n_eval_episodes: Number of episode to evaluate the agent\n  :param policy: The Reinforce agent\n  \"\"\"\n  episode_rewards = []\n  for episode in range(n_eval_episodes):\n    state = env.reset()\n    step = 0\n    done = False\n    total_rewards_ep = 0\n\n    for step in range(max_steps):\n      action, _ = policy.act(state)\n      new_state, reward, done, info = env.step(action)\n      total_rewards_ep += reward\n\n      if done:\n        break\n      state = new_state\n    episode_rewards.append(total_rewards_ep)\n  mean_reward = np.mean(episode_rewards)\n  std_reward = np.std(episode_rewards)\n\n  return mean_reward, std_reward","metadata":{"id":"3FamHmxyhBEU","execution":{"iopub.status.busy":"2024-01-17T04:01:15.809363Z","iopub.execute_input":"2024-01-17T04:01:15.810146Z","iopub.status.idle":"2024-01-17T04:01:15.817662Z","shell.execute_reply.started":"2024-01-17T04:01:15.810110Z","shell.execute_reply":"2024-01-17T04:01:15.816651Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"markdown","source":"## Evaluate our agent üìà","metadata":{"id":"xdH2QCrLTrlT"}},{"cell_type":"code","source":"evaluate_agent(eval_env,\n               pixelcopter_hyperparameters[\"max_t\"],\n               pixelcopter_hyperparameters[\"n_evaluation_episodes\"],\n               pixelcopter_policy)","metadata":{"id":"ohGSXDyHh0xx","execution":{"iopub.status.busy":"2024-01-17T04:01:19.213388Z","iopub.execute_input":"2024-01-17T04:01:19.213843Z","iopub.status.idle":"2024-01-17T04:01:19.258501Z","shell.execute_reply.started":"2024-01-17T04:01:19.213811Z","shell.execute_reply":"2024-01-17T04:01:19.257145Z"},"trusted":true},"execution_count":37,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[37], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m evaluate_agent(eval_env,\n\u001b[0;32m----> 2\u001b[0m                \u001b[43mpixelcopter_hyperparameters\u001b[49m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmax_t\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m      3\u001b[0m                pixelcopter_hyperparameters[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn_evaluation_episodes\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m      4\u001b[0m                pixelcopter_policy)\n","\u001b[0;31mNameError\u001b[0m: name 'pixelcopter_hyperparameters' is not defined"],"ename":"NameError","evalue":"name 'pixelcopter_hyperparameters' is not defined","output_type":"error"}]},{"cell_type":"markdown","source":"### Publish our trained model on the Hub üî•\nNow that we saw we got good results after the training, we can publish our trained model on the hub ü§ó with one line of code.\n\nHere's an example of a Model Card:\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/unit6/modelcard.png\"/>","metadata":{"id":"7CoeLkQ7TpO8"}},{"cell_type":"markdown","source":"### Push to the Hub\n#### Do not modify this code","metadata":{"id":"Jmhs1k-cftIq"}},{"cell_type":"code","source":"from huggingface_hub import HfApi, snapshot_download\nfrom huggingface_hub.repocard import metadata_eval_result, metadata_save\n\nfrom pathlib import Path\nimport datetime\nimport json\nimport imageio\n\nimport tempfile\n\nimport os","metadata":{"id":"LIVsvlW_8tcw","trusted":true},"execution_count":76,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[76], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mhuggingface_hub\u001b[49m\n","\u001b[0;31mNameError\u001b[0m: name 'huggingface_hub' is not defined"],"ename":"NameError","evalue":"name 'huggingface_hub' is not defined","output_type":"error"}]},{"cell_type":"code","source":"def record_video(env, policy, out_directory, fps=30):\n  \"\"\"\n  Generate a replay video of the agent\n  :param env\n  :param Qtable: Qtable of our agent\n  :param out_directory\n  :param fps: how many frame per seconds (with taxi-v3 and frozenlake-v1 we use 1)\n  \"\"\"\n  images = []\n  done = False\n  state = env.reset()\n  img = env.render(mode='rgb_array')\n  images.append(img)\n  while not done:\n    # Take the action (index) that have the maximum expected future reward given that state\n    action, _ = policy.act(state)\n    state, reward, done, info = env.step(action) # We directly put next_state = state for recording logic\n    img = env.render(mode='rgb_array')\n    images.append(img)\n  imageio.mimsave(out_directory, [np.array(img) for i, img in enumerate(images)], fps=fps)","metadata":{"id":"Lo4JH45if81z","execution":{"iopub.status.busy":"2024-01-17T07:16:04.610400Z","iopub.execute_input":"2024-01-17T07:16:04.610893Z","iopub.status.idle":"2024-01-17T07:16:04.621122Z","shell.execute_reply.started":"2024-01-17T07:16:04.610853Z","shell.execute_reply":"2024-01-17T07:16:04.620048Z"},"trusted":true},"execution_count":66,"outputs":[]},{"cell_type":"code","source":"def push_to_hub(repo_id,\n                model,\n                hyperparameters,\n                eval_env,\n                video_fps=30\n                ):\n  \"\"\"\n  Evaluate, Generate a video and Upload a model to Hugging Face Hub.\n  This method does the complete pipeline:\n  - It evaluates the model\n  - It generates the model card\n  - It generates a replay video of the agent\n  - It pushes everything to the Hub\n\n  :param repo_id: repo_id: id of the model repository from the Hugging Face Hub\n  :param model: the pytorch model we want to save\n  :param hyperparameters: training hyperparameters\n  :param eval_env: evaluation environment\n  :param video_fps: how many frame per seconds to record our video replay\n  \"\"\"\n\n  _, repo_name = repo_id.split(\"/\")\n  api = HfApi()\n\n  # Step 1: Create the repo\n  repo_url = api.create_repo(\n        repo_id=repo_id,\n        exist_ok=True,\n  )\n\n  with tempfile.TemporaryDirectory() as tmpdirname:\n    local_directory = Path(tmpdirname)\n\n    # Step 2: Save the model\n    torch.save(model, local_directory / \"model.pt\")\n\n    # Step 3: Save the hyperparameters to JSON\n    with open(local_directory / \"hyperparameters.json\", \"w\") as outfile:\n      json.dump(hyperparameters, outfile)\n\n    # Step 4: Evaluate the model and build JSON\n    mean_reward, std_reward = evaluate_agent(eval_env,\n                                            hyperparameters[\"max_t\"],\n                                            hyperparameters[\"n_evaluation_episodes\"],\n                                            model)\n    # Get datetime\n    eval_datetime = datetime.datetime.now()\n    eval_form_datetime = eval_datetime.isoformat()\n\n    evaluate_data = {\n          \"env_id\": hyperparameters[\"env_id\"],\n          \"mean_reward\": mean_reward,\n          \"n_evaluation_episodes\": hyperparameters[\"n_evaluation_episodes\"],\n          \"eval_datetime\": eval_form_datetime,\n    }\n\n    # Write a JSON file\n    with open(local_directory / \"results.json\", \"w\") as outfile:\n        json.dump(evaluate_data, outfile)\n\n    # Step 5: Create the model card\n    env_name = hyperparameters[\"env_id\"]\n\n    metadata = {}\n    metadata[\"tags\"] = [\n          env_name,\n          \"reinforce\",\n          \"reinforcement-learning\",\n          \"custom-implementation\",\n          \"deep-rl-class\"\n      ]\n\n    # Add metrics\n    eval = metadata_eval_result(\n        model_pretty_name=repo_name,\n        task_pretty_name=\"reinforcement-learning\",\n        task_id=\"reinforcement-learning\",\n        metrics_pretty_name=\"mean_reward\",\n        metrics_id=\"mean_reward\",\n        metrics_value=f\"{mean_reward:.2f} +/- {std_reward:.2f}\",\n        dataset_pretty_name=env_name,\n        dataset_id=env_name,\n      )\n\n    # Merges both dictionaries\n    metadata = {**metadata, **eval}\n\n    model_card = f\"\"\"\n  # **Reinforce** Agent playing **{env_id}**\n  This is a trained model of a **Reinforce** agent playing **{env_id}** .\n  To learn to use this model and train yours check Unit 4 of the Deep Reinforcement Learning Course: https://huggingface.co/deep-rl-course/unit4/introduction\n  \"\"\"\n\n    readme_path = local_directory / \"README.md\"\n    readme = \"\"\n    if readme_path.exists():\n        with readme_path.open(\"r\", encoding=\"utf8\") as f:\n          readme = f.read()\n    else:\n      readme = model_card\n\n    with readme_path.open(\"w\", encoding=\"utf-8\") as f:\n      f.write(readme)\n\n    # Save our metrics to Readme metadata\n    metadata_save(readme_path, metadata)\n\n    # Step 6: Record a video\n    video_path =  local_directory / \"replay.mp4\"\n    record_video(env, model, video_path, video_fps)\n\n    # Step 7. Push everything to the Hub\n    api.upload_folder(\n          repo_id=repo_id,\n          folder_path=local_directory,\n          path_in_repo=\".\",\n    )\n\n    print(f\"Your model is pushed to the Hub. You can view your model here: {repo_url}\")","metadata":{"id":"_TPdq47D7_f_","execution":{"iopub.status.busy":"2024-01-17T07:16:09.053673Z","iopub.execute_input":"2024-01-17T07:16:09.054088Z","iopub.status.idle":"2024-01-17T07:16:09.068991Z","shell.execute_reply.started":"2024-01-17T07:16:09.054055Z","shell.execute_reply":"2024-01-17T07:16:09.067955Z"},"trusted":true},"execution_count":68,"outputs":[]},{"cell_type":"code","source":"notebook_login()\n!git config --global credential.helper store","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:17:11.076375Z","iopub.execute_input":"2024-01-17T07:17:11.076809Z","iopub.status.idle":"2024-01-17T07:17:12.097389Z","shell.execute_reply.started":"2024-01-17T07:17:11.076770Z","shell.execute_reply":"2024-01-17T07:17:12.096088Z"},"trusted":true},"execution_count":73,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv‚Ä¶","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"288572649fe648b381bea17e7a5fad32"}},"metadata":{}}]},{"cell_type":"markdown","source":"### .\n\nBy using `push_to_hub` **you evaluate, record a replay, generate a model card of your agent and push it to the Hub**.\n\nThis way:\n- You can **showcase our work** üî•\n- You can **visualize your agent playing** üëÄ\n- You can **share with the community an agent that others can use** üíæ\n- You can **access a leaderboard üèÜ to see how well your agent is performing compared to your classmates** üëâ https://huggingface.co/spaces/huggingface-projects/Deep-Reinforcement-Learning-Leaderboard\n","metadata":{"id":"w17w8CxzoURM"}},{"cell_type":"markdown","source":"To be able to share your model with the community there are three more steps to follow:\n\n1Ô∏è‚É£ (If it's not already done) create an account to HF ‚û° https://huggingface.co/join\n\n2Ô∏è‚É£ Sign in and then, you need to store your authentication token from the Hugging Face website.\n- Create a new token (https://huggingface.co/settings/tokens) **with write role**\n\n\n<img src=\"https://huggingface.co/datasets/huggingface-deep-rl-course/course-images/resolve/main/en/notebooks/create-token.jpg\" alt=\"Create HF Token\">\n","metadata":{"id":"cWnFC0iZooTw"}},{"cell_type":"code","source":"!huggingface-cli login","metadata":{"id":"QB5nIcxR8paT","execution":{"iopub.status.busy":"2024-01-17T07:25:57.510705Z","iopub.execute_input":"2024-01-17T07:25:57.511592Z","iopub.status.idle":"2024-01-17T07:28:19.217527Z","shell.execute_reply.started":"2024-01-17T07:25:57.511557Z","shell.execute_reply":"2024-01-17T07:28:19.216283Z"},"trusted":true},"execution_count":103,"outputs":[{"name":"stdout","text":"\n    _|    _|  _|    _|    _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|_|_|_|    _|_|      _|_|_|  _|_|_|_|\n    _|    _|  _|    _|  _|        _|          _|    _|_|    _|  _|            _|        _|    _|  _|        _|\n    _|_|_|_|  _|    _|  _|  _|_|  _|  _|_|    _|    _|  _|  _|  _|  _|_|      _|_|_|    _|_|_|_|  _|        _|_|_|\n    _|    _|  _|    _|  _|    _|  _|    _|    _|    _|    _|_|  _|    _|      _|        _|    _|  _|        _|\n    _|    _|    _|_|      _|_|_|    _|_|_|  _|_|_|  _|      _|    _|_|_|      _|        _|    _|    _|_|_|  _|_|_|_|\n\n    To login, `huggingface_hub` requires a token generated from https://huggingface.co/settings/tokens .\nToken: Traceback (most recent call last):\n  File \"/opt/conda/bin/huggingface-cli\", line 8, in <module>\n    sys.exit(main())\n  File \"/opt/conda/lib/python3.10/site-packages/huggingface_hub/commands/huggingface_cli.py\", line 49, in main\n    service.run()\n  File \"/opt/conda/lib/python3.10/site-packages/huggingface_hub/commands/user.py\", line 98, in run\n    login(token=self.args.token, add_to_git_credential=self.args.add_to_git_credential)\n  File \"/opt/conda/lib/python3.10/site-packages/huggingface_hub/_login.py\", line 113, in login\n    interpreter_login(new_session=new_session, write_permission=write_permission)\n  File \"/opt/conda/lib/python3.10/site-packages/huggingface_hub/_login.py\", line 189, in interpreter_login\n    token = getpass(\"Token: \")\n  File \"/opt/conda/lib/python3.10/getpass.py\", line 77, in unix_getpass\n    passwd = _raw_input(prompt, stream, input=input)\n  File \"/opt/conda/lib/python3.10/getpass.py\", line 146, in _raw_input\n    line = input.readline()\n  File \"/opt/conda/lib/python3.10/codecs.py\", line 319, in decode\n    def decode(self, input, final=False):\nKeyboardInterrupt\n","output_type":"stream"}]},{"cell_type":"code","source":"from huggingface_hub import login\nlogin()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:35:51.201197Z","iopub.execute_input":"2024-01-17T07:35:51.201568Z","iopub.status.idle":"2024-01-17T07:35:51.226596Z","shell.execute_reply.started":"2024-01-17T07:35:51.201540Z","shell.execute_reply":"2024-01-17T07:35:51.225628Z"},"trusted":true},"execution_count":121,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv‚Ä¶","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9eeed2b24758468e91aab3f23f9e8792"}},"metadata":{}}]},{"cell_type":"markdown","source":"If you don't want to use a Google Colab or a Jupyter Notebook, you need to use this command instead: `huggingface-cli login` (or `login`)","metadata":{"id":"GyWc1x3-o3xG"}},{"cell_type":"markdown","source":"3Ô∏è‚É£ We're now ready to push our trained agent to the ü§ó Hub üî• using `package_to_hub()` function","metadata":{"id":"F-D-zhbRoeOm"}},{"cell_type":"code","source":"repo_id = \"\" #TODO Define your repo id {username/Reinforce-{model-id}}\npush_to_hub(repo_id,\n                cartpole_policy, # The model we want to save\n                cartpole_hyperparameters, # Hyperparameters\n                eval_env, # Evaluation environment\n                video_fps=30\n                )","metadata":{"id":"UNwkTS65Uq3Q"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now that we try the robustness of our implementation, let's try a more complex environment: PixelCopter üöÅ\n\n\n","metadata":{"id":"jrnuKH1gYZSz"}},{"cell_type":"markdown","source":"## Second agent: PixelCopter üöÅ\n\n### Study the PixelCopter environment üëÄ\n- [The Environment documentation](https://pygame-learning-environment.readthedocs.io/en/latest/user/games/pixelcopter.html)\n","metadata":{"id":"JNLVmKKVKA6j"}},{"cell_type":"code","source":"env_id = \"Pixelcopter-PLE-v0\"\nenv = gym.make(env_id)\neval_env = gym.make(env_id)\ns_size = env.observation_space.shape[0]\na_size = env.action_space.n","metadata":{"id":"JBSc8mlfyin3","execution":{"iopub.status.busy":"2024-01-17T04:01:44.083534Z","iopub.execute_input":"2024-01-17T04:01:44.084369Z","iopub.status.idle":"2024-01-17T04:01:44.098782Z","shell.execute_reply.started":"2024-01-17T04:01:44.084321Z","shell.execute_reply":"2024-01-17T04:01:44.097520Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"print(\"_____OBSERVATION SPACE_____ \\n\")\nprint(\"The State Space is: \", s_size)\nprint(\"Sample observation\", env.observation_space.sample()) # Get a random observation","metadata":{"id":"L5u_zAHsKBy7","execution":{"iopub.status.busy":"2024-01-17T04:01:46.295989Z","iopub.execute_input":"2024-01-17T04:01:46.297145Z","iopub.status.idle":"2024-01-17T04:01:46.304509Z","shell.execute_reply.started":"2024-01-17T04:01:46.297096Z","shell.execute_reply":"2024-01-17T04:01:46.303250Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stdout","text":"_____OBSERVATION SPACE_____ \n\nThe State Space is:  7\nSample observation [-2.7901535  -0.99791366  1.792315    1.5259602   1.4619886  -1.1157864\n  0.15569323]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"\\n _____ACTION SPACE_____ \\n\")\nprint(\"The Action Space is: \", a_size)\nprint(\"Action Space Sample\", env.action_space.sample()) # Take a random action","metadata":{"id":"D7yJM9YXKNbq","execution":{"iopub.status.busy":"2024-01-17T04:01:48.076205Z","iopub.execute_input":"2024-01-17T04:01:48.076627Z","iopub.status.idle":"2024-01-17T04:01:48.083277Z","shell.execute_reply.started":"2024-01-17T04:01:48.076594Z","shell.execute_reply":"2024-01-17T04:01:48.082108Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"\n _____ACTION SPACE_____ \n\nThe Action Space is:  2\nAction Space Sample 0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"The observation space (7) üëÄ:\n- player y position\n- player velocity\n- player distance to floor\n- player distance to ceiling\n- next block x distance to player\n- next blocks top y location\n- next blocks bottom y location\n\nThe action space(2) üéÆ:\n- Up (press accelerator)\n- Do nothing (don't press accelerator)\n\nThe reward function üí∞:\n- For each vertical block it passes through it gains a positive reward of +1. Each time a terminal state reached it receives a negative reward of -1.","metadata":{"id":"NNWvlyvzalXr"}},{"cell_type":"markdown","source":"### Define the new Policy üß†\n- We need to have a deeper neural network since the environment is more complex","metadata":{"id":"aV1466QP8crz"}},{"cell_type":"code","source":"class Policy(nn.Module):\n    def __init__(self, s_size, a_size, h_size):\n        super(Policy, self).__init__()\n        # Define the three layers here\n\n    def forward(self, x):\n        # Define the forward process here\n        return F.softmax(x, dim=1)\n\n    def act(self, state):\n        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n        probs = self.forward(state).cpu()\n        m = Categorical(probs)\n        action = m.sample()\n        return action.item(), m.log_prob(action)","metadata":{"id":"I1eBkCiX2X_S"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Solution","metadata":{"id":"47iuAFqV8Ws-"}},{"cell_type":"code","source":"class Policy(nn.Module):\n    def __init__(self, s_size, a_size, h_size):\n        super(Policy, self).__init__()\n        self.fc1 = nn.Linear(s_size, h_size)\n        self.fc2 = nn.Linear(h_size, h_size*2)\n        self.fc3 = nn.Linear(h_size*2, a_size)\n\n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return F.softmax(x, dim=1)\n\n    def act(self, state):\n        state = torch.from_numpy(state).float().unsqueeze(0).to(device)\n        probs = self.forward(state).cpu()\n        m = Categorical(probs)\n        action = m.sample()\n        return action.item(), m.log_prob(action)","metadata":{"id":"wrNuVcHC8Xu7","execution":{"iopub.status.busy":"2024-01-17T04:01:53.842215Z","iopub.execute_input":"2024-01-17T04:01:53.842612Z","iopub.status.idle":"2024-01-17T04:01:53.851830Z","shell.execute_reply.started":"2024-01-17T04:01:53.842570Z","shell.execute_reply":"2024-01-17T04:01:53.850528Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"markdown","source":"### Define the hyperparameters ‚öôÔ∏è\n- Because this environment is more complex.\n- Especially for the hidden size, we need more neurons.","metadata":{"id":"SM1QiGCSbBkM"}},{"cell_type":"code","source":"pixelcopter_hyperparameters = {\n    \"h_size\": 64,\n    \"n_training_episodes\": 50000,\n    \"n_evaluation_episodes\": 10,\n    \"max_t\": 10000,\n    \"gamma\": 0.99,\n    \"lr\": 1e-4,\n    \"env_id\": env_id,\n    \"state_space\": s_size,\n    \"action_space\": a_size,\n}","metadata":{"id":"y0uujOR_ypB6","execution":{"iopub.status.busy":"2024-01-17T04:01:57.261602Z","iopub.execute_input":"2024-01-17T04:01:57.261997Z","iopub.status.idle":"2024-01-17T04:01:57.267539Z","shell.execute_reply.started":"2024-01-17T04:01:57.261968Z","shell.execute_reply":"2024-01-17T04:01:57.266522Z"},"trusted":true},"execution_count":47,"outputs":[]},{"cell_type":"markdown","source":"###  Train it\n- We're now ready to train our agent üî•.","metadata":{"id":"wyvXTJWm9GJG"}},{"cell_type":"code","source":"# Create policy and place it to the device\n# torch.manual_seed(50)\npixelcopter_policy = Policy(pixelcopter_hyperparameters[\"state_space\"], pixelcopter_hyperparameters[\"action_space\"], pixelcopter_hyperparameters[\"h_size\"]).to(device)\npixelcopter_optimizer = optim.Adam(pixelcopter_policy.parameters(), lr=pixelcopter_hyperparameters[\"lr\"])","metadata":{"id":"7mM2P_ckysFE","execution":{"iopub.status.busy":"2024-01-17T04:02:00.027887Z","iopub.execute_input":"2024-01-17T04:02:00.028909Z","iopub.status.idle":"2024-01-17T04:02:00.282830Z","shell.execute_reply.started":"2024-01-17T04:02:00.028874Z","shell.execute_reply":"2024-01-17T04:02:00.281781Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"scores = reinforce(pixelcopter_policy,\n                   pixelcopter_optimizer,\n                   pixelcopter_hyperparameters[\"n_training_episodes\"],\n                   pixelcopter_hyperparameters[\"max_t\"],\n                   pixelcopter_hyperparameters[\"gamma\"],\n                   1000)","metadata":{"id":"v1HEqP-fy-Rf","execution":{"iopub.status.busy":"2024-01-17T04:02:04.698151Z","iopub.execute_input":"2024-01-17T04:02:04.699509Z","iopub.status.idle":"2024-01-17T07:09:08.483735Z","shell.execute_reply.started":"2024-01-17T04:02:04.699454Z","shell.execute_reply":"2024-01-17T07:09:08.482593Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:174: UserWarning: \u001b[33mWARN: Future gym versions will require that `Env.reset` can be passed a `seed` instead of using `Env.seed` for resetting the environment random number generator.\u001b[0m\n  logger.warn(\n/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:187: UserWarning: \u001b[33mWARN: Future gym versions will require that `Env.reset` can be passed `options` to allow the environment initialisation to be passed additional information.\u001b[0m\n  logger.warn(\n/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:195: UserWarning: \u001b[33mWARN: The result returned by `env.reset()` was not a tuple of the form `(obs, info)`, where `obs` is a observation and `info` is a dictionary containing additional information. Actual type: `<class 'numpy.ndarray'>`\u001b[0m\n  logger.warn(\n/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:219: DeprecationWarning: \u001b[33mWARN: Core environment is written in old step API which returns one bool instead of two. It is recommended to rewrite the environment with new step API. \u001b[0m\n  logger.deprecation(\n/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:225: DeprecationWarning: `np.bool8` is a deprecated alias for `np.bool_`.  (Deprecated NumPy 1.24)\n  if not isinstance(done, (bool, np.bool8)):\n/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:141: UserWarning: \u001b[33mWARN: The obs returned by the `step()` method was expecting numpy array dtype to be float32, actual type: float64\u001b[0m\n  logger.warn(\n/opt/conda/lib/python3.10/site-packages/gym/utils/passive_env_checker.py:165: UserWarning: \u001b[33mWARN: The obs returned by the `step()` method is not within the observation space.\u001b[0m\n  logger.warn(f\"{pre} is not within the observation space.\")\n","output_type":"stream"},{"name":"stdout","text":"Episode 1000\tAverage Score: 2.60\nEpisode 2000\tAverage Score: 4.77\nEpisode 3000\tAverage Score: 6.97\nEpisode 4000\tAverage Score: 10.20\nEpisode 5000\tAverage Score: 9.71\nEpisode 6000\tAverage Score: 13.43\nEpisode 7000\tAverage Score: 12.07\nEpisode 8000\tAverage Score: 14.26\nEpisode 9000\tAverage Score: 13.51\nEpisode 10000\tAverage Score: 13.49\nEpisode 11000\tAverage Score: 14.79\nEpisode 12000\tAverage Score: 17.54\nEpisode 13000\tAverage Score: 16.85\nEpisode 14000\tAverage Score: 18.33\nEpisode 15000\tAverage Score: 19.31\nEpisode 16000\tAverage Score: 21.93\nEpisode 17000\tAverage Score: 19.76\nEpisode 18000\tAverage Score: 19.40\nEpisode 19000\tAverage Score: 25.45\nEpisode 20000\tAverage Score: 17.66\nEpisode 21000\tAverage Score: 21.52\nEpisode 22000\tAverage Score: 21.73\nEpisode 23000\tAverage Score: 23.49\nEpisode 24000\tAverage Score: 21.94\nEpisode 25000\tAverage Score: 12.08\nEpisode 26000\tAverage Score: 24.68\nEpisode 27000\tAverage Score: 19.63\nEpisode 28000\tAverage Score: 33.10\nEpisode 29000\tAverage Score: 14.61\nEpisode 30000\tAverage Score: 24.95\nEpisode 31000\tAverage Score: 24.11\nEpisode 32000\tAverage Score: 19.77\nEpisode 33000\tAverage Score: 25.50\nEpisode 34000\tAverage Score: 28.81\nEpisode 35000\tAverage Score: 33.33\nEpisode 36000\tAverage Score: 17.80\nEpisode 37000\tAverage Score: 26.68\nEpisode 38000\tAverage Score: 33.11\nEpisode 39000\tAverage Score: 30.86\nEpisode 40000\tAverage Score: 33.72\nEpisode 41000\tAverage Score: 34.55\nEpisode 42000\tAverage Score: 26.39\nEpisode 43000\tAverage Score: 32.46\nEpisode 44000\tAverage Score: 27.00\nEpisode 45000\tAverage Score: 24.18\nEpisode 46000\tAverage Score: 25.50\nEpisode 47000\tAverage Score: 20.10\nEpisode 48000\tAverage Score: 29.92\nEpisode 49000\tAverage Score: 33.10\nEpisode 50000\tAverage Score: 16.99\n","output_type":"stream"}]},{"cell_type":"code","source":"evaluate_agent(eval_env,\n               pixelcopter_hyperparameters[\"max_t\"],\n               pixelcopter_hyperparameters[\"n_evaluation_episodes\"],\n               pixelcopter_policy)","metadata":{"id":"f17Vr1V6_28v","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Publish our trained model on the Hub üî•","metadata":{"id":"8kwFQ-Ip85BE"}},{"cell_type":"code","source":"from huggingface_hub import notebook_login # To log to our Hugging Face account to be able to upload models to the Hub.\nnotebook_login()\n!git config --global credential.helper store","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:19:43.229702Z","iopub.execute_input":"2024-01-17T07:19:43.230778Z","iopub.status.idle":"2024-01-17T07:19:44.304930Z","shell.execute_reply.started":"2024-01-17T07:19:43.230722Z","shell.execute_reply":"2024-01-17T07:19:44.303475Z"},"trusted":true},"execution_count":86,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv‚Ä¶","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4109ae8b7abc4a7c8d33187110a1c72b"}},"metadata":{}}]},{"cell_type":"code","source":"notebook_login()","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:33:45.068749Z","iopub.execute_input":"2024-01-17T07:33:45.069626Z","iopub.status.idle":"2024-01-17T07:33:45.096360Z","shell.execute_reply.started":"2024-01-17T07:33:45.069583Z","shell.execute_reply":"2024-01-17T07:33:45.095298Z"},"trusted":true},"execution_count":120,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv‚Ä¶","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c5f95848297b4633a450f28d02087c29"}},"metadata":{}}]},{"cell_type":"code","source":"!python -c ‚Äúfrom huggingface_hub.hf_api import HfFolder; HfFolder.save_token(‚ÄòPUT YOUR TOKEN HERE‚Äô)‚Äù","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from ipywidgets import Button, VBox\nVBox([Button(description='button 1')])","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:33:30.635046Z","iopub.execute_input":"2024-01-17T07:33:30.635690Z","iopub.status.idle":"2024-01-17T07:33:30.648543Z","shell.execute_reply.started":"2024-01-17T07:33:30.635660Z","shell.execute_reply":"2024-01-17T07:33:30.647486Z"},"trusted":true},"execution_count":119,"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(Button(description='button 1', style=ButtonStyle()),))","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2a08597c7bc942e0a884706b01393627"}},"metadata":{}}]},{"cell_type":"code","source":"repo_id = \"beibeif/pixel_flappycube_v1\" #TODO Define your repo id {username/Reinforce-{model-id}}\npush_to_hub(repo_id,\n                pixelcopter_policy, # The model we want to save\n                pixelcopter_hyperparameters, # Hyperparameters\n                eval_env, # Evaluation environment\n                video_fps=30\n                )","metadata":{"id":"6PtB7LRbTKWK","execution":{"iopub.status.busy":"2024-01-17T07:28:34.210020Z","iopub.execute_input":"2024-01-17T07:28:34.210464Z","iopub.status.idle":"2024-01-17T07:28:34.371483Z","shell.execute_reply.started":"2024-01-17T07:28:34.210434Z","shell.execute_reply":"2024-01-17T07:28:34.369663Z"},"trusted":true},"execution_count":105,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[105], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m repo_id \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbeibeif/pixel_flappycube_v1\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;66;03m#TODO Define your repo id {username/Reinforce-{model-id}}\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m \u001b[43mpush_to_hub\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrepo_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[43m                \u001b[49m\u001b[43mpixelcopter_policy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;66;43;03m# The model we want to save\u001b[39;49;00m\n\u001b[1;32m      4\u001b[0m \u001b[43m                \u001b[49m\u001b[43mpixelcopter_hyperparameters\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;66;43;03m# Hyperparameters\u001b[39;49;00m\n\u001b[1;32m      5\u001b[0m \u001b[43m                \u001b[49m\u001b[43meval_env\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;66;43;03m# Evaluation environment\u001b[39;49;00m\n\u001b[1;32m      6\u001b[0m \u001b[43m                \u001b[49m\u001b[43mvideo_fps\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m30\u001b[39;49m\n\u001b[1;32m      7\u001b[0m \u001b[43m                \u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[68], line 26\u001b[0m, in \u001b[0;36mpush_to_hub\u001b[0;34m(repo_id, model, hyperparameters, eval_env, video_fps)\u001b[0m\n\u001b[1;32m     23\u001b[0m api \u001b[38;5;241m=\u001b[39m HfApi()\n\u001b[1;32m     25\u001b[0m \u001b[38;5;66;03m# Step 1: Create the repo\u001b[39;00m\n\u001b[0;32m---> 26\u001b[0m repo_url \u001b[38;5;241m=\u001b[39m \u001b[43mapi\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcreate_repo\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     27\u001b[0m \u001b[43m      \u001b[49m\u001b[43mrepo_id\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrepo_id\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     28\u001b[0m \u001b[43m      \u001b[49m\u001b[43mexist_ok\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m     29\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     31\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m tempfile\u001b[38;5;241m.\u001b[39mTemporaryDirectory() \u001b[38;5;28;01mas\u001b[39;00m tmpdirname:\n\u001b[1;32m     32\u001b[0m   local_directory \u001b[38;5;241m=\u001b[39m Path(tmpdirname)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py:118\u001b[0m, in \u001b[0;36mvalidate_hf_hub_args.<locals>._inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m check_use_auth_token:\n\u001b[1;32m    116\u001b[0m     kwargs \u001b[38;5;241m=\u001b[39m smoothly_deprecate_use_auth_token(fn_name\u001b[38;5;241m=\u001b[39mfn\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m, has_token\u001b[38;5;241m=\u001b[39mhas_token, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[0;32m--> 118\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/hf_api.py:3162\u001b[0m, in \u001b[0;36mHfApi.create_repo\u001b[0;34m(self, repo_id, token, private, repo_type, exist_ok, space_sdk, space_hardware, space_storage, space_sleep_time, space_secrets, space_variables)\u001b[0m\n\u001b[1;32m   3158\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m_lfsmultipartthresh\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m   3159\u001b[0m     \u001b[38;5;66;03m# Testing purposes only.\u001b[39;00m\n\u001b[1;32m   3160\u001b[0m     \u001b[38;5;66;03m# See https://github.com/huggingface/huggingface_hub/pull/733/files#r820604472\u001b[39;00m\n\u001b[1;32m   3161\u001b[0m     json[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlfsmultipartthresh\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lfsmultipartthresh  \u001b[38;5;66;03m# type: ignore\u001b[39;00m\n\u001b[0;32m-> 3162\u001b[0m headers \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_build_hf_headers\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtoken\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtoken\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mis_write_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m   3164\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;28;01mTrue\u001b[39;00m:\n\u001b[1;32m   3165\u001b[0m     r \u001b[38;5;241m=\u001b[39m get_session()\u001b[38;5;241m.\u001b[39mpost(path, headers\u001b[38;5;241m=\u001b[39mheaders, json\u001b[38;5;241m=\u001b[39mjson)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/hf_api.py:8191\u001b[0m, in \u001b[0;36mHfApi._build_hf_headers\u001b[0;34m(self, token, is_write_action, library_name, library_version, user_agent)\u001b[0m\n\u001b[1;32m   8188\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m token \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   8189\u001b[0m     \u001b[38;5;66;03m# Cannot do `token = token or self.token` as token can be `False`.\u001b[39;00m\n\u001b[1;32m   8190\u001b[0m     token \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtoken\n\u001b[0;32m-> 8191\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mbuild_hf_headers\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   8192\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtoken\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtoken\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   8193\u001b[0m \u001b[43m    \u001b[49m\u001b[43mis_write_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_write_action\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   8194\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlibrary_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlibrary_name\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlibrary_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   8195\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlibrary_version\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mlibrary_version\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mlibrary_version\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   8196\u001b[0m \u001b[43m    \u001b[49m\u001b[43muser_agent\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43muser_agent\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01mor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43muser_agent\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   8197\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_validators.py:118\u001b[0m, in \u001b[0;36mvalidate_hf_hub_args.<locals>._inner_fn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m check_use_auth_token:\n\u001b[1;32m    116\u001b[0m     kwargs \u001b[38;5;241m=\u001b[39m smoothly_deprecate_use_auth_token(fn_name\u001b[38;5;241m=\u001b[39mfn\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m, has_token\u001b[38;5;241m=\u001b[39mhas_token, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[0;32m--> 118\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_headers.py:122\u001b[0m, in \u001b[0;36mbuild_hf_headers\u001b[0;34m(token, is_write_action, library_name, library_version, user_agent)\u001b[0m\n\u001b[1;32m    120\u001b[0m \u001b[38;5;66;03m# Get auth token to send\u001b[39;00m\n\u001b[1;32m    121\u001b[0m token_to_send \u001b[38;5;241m=\u001b[39m get_token_to_send(token)\n\u001b[0;32m--> 122\u001b[0m \u001b[43m_validate_token_to_send\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtoken_to_send\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mis_write_action\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mis_write_action\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    124\u001b[0m \u001b[38;5;66;03m# Combine headers\u001b[39;00m\n\u001b[1;32m    125\u001b[0m headers \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m    126\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124muser-agent\u001b[39m\u001b[38;5;124m\"\u001b[39m: _http_user_agent(\n\u001b[1;32m    127\u001b[0m         library_name\u001b[38;5;241m=\u001b[39mlibrary_name,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    130\u001b[0m     )\n\u001b[1;32m    131\u001b[0m }\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/huggingface_hub/utils/_headers.py:172\u001b[0m, in \u001b[0;36m_validate_token_to_send\u001b[0;34m(token, is_write_action)\u001b[0m\n\u001b[1;32m    170\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_write_action:\n\u001b[1;32m    171\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m token \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 172\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    173\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mToken is required (write-access action) but no token found. You need\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    174\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m to provide a token or be logged in to Hugging Face with\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    175\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m `huggingface-cli login` or `huggingface_hub.login`. See\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    176\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m https://huggingface.co/settings/tokens.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    177\u001b[0m         )\n\u001b[1;32m    178\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m token\u001b[38;5;241m.\u001b[39mstartswith(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mapi_org\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m    179\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    180\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou must use your personal account token for write-access methods. To\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    181\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m generate a write-access token, go to\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    182\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m https://huggingface.co/settings/tokens\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    183\u001b[0m         )\n","\u001b[0;31mValueError\u001b[0m: Token is required (write-access action) but no token found. You need to provide a token or be logged in to Hugging Face with `huggingface-cli login` or `huggingface_hub.login`. See https://huggingface.co/settings/tokens."],"ename":"ValueError","evalue":"Token is required (write-access action) but no token found. You need to provide a token or be logged in to Hugging Face with `huggingface-cli login` or `huggingface_hub.login`. See https://huggingface.co/settings/tokens.","output_type":"error"}]},{"cell_type":"code","source":"huggingface_hub.login","metadata":{"execution":{"iopub.status.busy":"2024-01-17T07:19:43.217358Z","iopub.execute_input":"2024-01-17T07:19:43.217867Z","iopub.status.idle":"2024-01-17T07:19:43.228468Z","shell.execute_reply.started":"2024-01-17T07:19:43.217832Z","shell.execute_reply":"2024-01-17T07:19:43.227572Z"},"trusted":true},"execution_count":85,"outputs":[{"execution_count":85,"output_type":"execute_result","data":{"text/plain":"<function huggingface_hub._login.login(token: Optional[str] = None, add_to_git_credential: bool = False, new_session: bool = True, write_permission: bool = False) -> None>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Some additional challenges üèÜ\nThe best way to learn **is to try things on your own**! As you saw, the current agent is not doing great. As a first suggestion, you can train for more steps. But also trying to find better parameters.\n\nIn the [Leaderboard](https://huggingface.co/spaces/huggingface-projects/Deep-Reinforcement-Learning-Leaderboard) you will find your agents. Can you get to the top?\n\nHere are some ideas to achieve so:\n* Train more steps\n* Try different hyperparameters by looking at what your classmates have done üëâ https://huggingface.co/models?other=reinforce\n* **Push your new trained model** on the Hub üî•\n* **Improving the implementation for more complex environments** (for instance, what about changing the network to a Convolutional Neural Network to handle\nframes as observation)?","metadata":{"id":"7VDcJ29FcOyb"}},{"cell_type":"markdown","source":"________________________________________________________________________\n\n**Congrats on finishing this unit**!¬†There was a lot of information.\nAnd congrats on finishing the tutorial. You've just coded your first Deep Reinforcement Learning agent from scratch using PyTorch and shared it on the Hub ü•≥.\n\nDon't hesitate to iterate on this unit **by improving the implementation for more complex environments** (for instance, what about changing the network to a Convolutional Neural Network to handle\nframes as observation)?\n\nIn the next unit, **we're going to learn more about Unity MLAgents**, by training agents in Unity environments. This way, you will be ready to participate in the **AI vs AI challenges where you'll train your agents\nto compete against other agents in a snowball fight and a soccer game.**\n\nSounds fun? See you next time!\n\nFinally, we would love **to hear what you think of the course and how we can improve it**. If you have some feedback then, please üëâ  [fill this form](https://forms.gle/BzKXWzLAGZESGNaE9)\n\nSee you in Unit 5! üî•\n\n### Keep Learning, stay awesome ü§ó\n\n","metadata":{"id":"x62pP0PHdA-y"}}]}